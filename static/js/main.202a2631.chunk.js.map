{"version":3,"sources":["components/Post.js","components/Homepage.js","components/Submit.js","components/App.js","serviceWorker.js","index.js"],"names":["Post","_this$props$post","this","props","post","title","text","react_default","a","createElement","className","rank","href","Link","to","concat","Component","Homepage","posts","map","item","index","Post_Post","key","Submit","processPost","event","preventDefault","target","value","_this","submitPost","history","push","onSubmit","action","htmlFor","name","type","id","rows","Single","Layout","children","App","state","JSON","parse","localStorage","getItem","Object","toConsumableArray","setState","setItem","stringify","console","log","_this2","BrowserRouter","Route","exact","path","render","Homepage_Homepage","assign","Submit_Submit","component","placeholder","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.202a2631.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Post extends Component {\r\n  render() {\r\n    let { title, text } = this.props.post;\r\n\r\n    return (\r\n      <div className=\"post\">\r\n        <div className=\"rank\">{this.props.rank}</div>\r\n        <div className=\"votes\">\r\n          <div className=\"arrow up\" />\r\n          <div className=\"score\">207</div>\r\n          <div className=\"arrow down\" />\r\n        </div>\r\n        <a href=\"#\" className=\"thumbnail self\" />\r\n        <div className=\"content\">\r\n          <div className=\"title-area\">\r\n            <span className=\"title\">\r\n              <Link to={`/post/${this.props.rank}`}>{title}</Link>\r\n            </span>\r\n            <span className=\"url\">(self.subreddit)</span>\r\n          </div>\r\n          <div className=\"meta-area\">\r\n            Submitted 8 hours ago by tamal to r/cobra\r\n          </div>\r\n          <div className=\"link-area\">10 comments share save hide report</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Post from './Post';\r\n\r\nexport default class Homepage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.posts.map((item, index) => (\r\n          <Post key={index} post={item} rank={index + 1} />\r\n        ))}\r\n        <div className=\"pagination\">View more: next ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Submit extends Component {\r\n  processPost = (event) => {\r\n    event.preventDefault();\r\n    let post = {};\r\n    post.title = event.target.title.value;\r\n    post.text = event.target.text.value;\r\n    if (post.title) {\r\n      let result = this.props.submitPost(post);\r\n      if (result) {\r\n        this.props.history.push('/');\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Submit a new post</h3>\r\n        <form onSubmit={this.processPost} className=\"submit-form\" action=\"\">\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"title\">title</label>\r\n            <input name=\"title\" type=\"text\" />\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <label htmlFor=\"text\">text (optional)</label>\r\n            <textarea name=\"text\" id=\"\" rows=\"6\" />\r\n          </div>\r\n          <button>submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Post from './Post';\r\nimport Homepage from './Homepage';\r\nimport Submit from './Submit';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\n\r\nfunction About() {\r\n  return <h1>About Component</h1>;\r\n}\r\n\r\nfunction Single() {\r\n  return <h1>Single Reddit Page</h1>;\r\n}\r\n\r\nfunction Layout(props) {\r\n  return <div id=\"layout\">{props.children}</div>;\r\n}\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    posts: JSON.parse(localStorage.getItem('posts')) || []\r\n  };\r\n\r\n  submitPost = (post) => {\r\n    let posts = [...this.state.posts];\r\n    posts.push(post);\r\n    this.setState({ posts });\r\n    localStorage.setItem('posts', JSON.stringify(posts));\r\n    console.log('Saved!');\r\n    return true;\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   let posts = localStorage.getItem(posts) || [];\r\n  //   this.setState({ posts });\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Layout>\r\n          <header id=\"header\">\r\n            <nav className=\"top-menu\">Home - Popular - All - Random</nav>\r\n            <div className=\"main-header\">\r\n              <Link to=\"/\" id=\"header-img\" className=\"default-header\">\r\n                reddit clone\r\n              </Link>\r\n              <div className=\"tab-menu\" />\r\n\r\n              <div className=\"user-header\">tamalweb (2,214) Message logout</div>\r\n            </div>\r\n          </header>\r\n          <div id=\"container\">\r\n            <main id=\"body-submissions\">\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                render={(props) => (\r\n                  <Homepage posts={this.state.posts} {...props} />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/submit\"\r\n                render={(props) => (\r\n                  <Submit submitPost={this.submitPost} {...props} />\r\n                )}\r\n              />\r\n              <Route path=\"/:post\" component={Single} />\r\n            </main>\r\n            <aside id=\"sidebar\">\r\n              <form action=\"\">\r\n                <input className=\"search\" type=\"text\" placeholder=\"Search\" />\r\n              </form>\r\n              Sidebar for login/register area\r\n              <p>\r\n                <Link to=\"/submit\">Submit</Link>\r\n              </p>\r\n            </aside>\r\n          </div>\r\n          <footer id=\"footer\">\r\n            <div className=\"fat-menu\">Fat menu will go here..</div>\r\n            <div className=\"copyright\">Copyright info goes here..</div>\r\n          </footer>\r\n        </Layout>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './css/main.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}